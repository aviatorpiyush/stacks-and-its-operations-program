#include<iostream>
using namespace std;

struct queue
{
    int size;
    int front;
    int rear;
    int *qu;
};

void create(struct queue *q,int size)
{
    q->size=size;
    q->front =q->rear=0;
    q->qu = new int [(q->size)*sizeof(int)];

}

void enqueue(struct queue *q,int x)
{
    if((q->rear+1)%q->size==q->front)
        cout<<"queue is full";
    else
        q->rear=(q->rear+1)%q->size;
        q->qu[q->rear]=x;

}

int dequeue(struct queue *q)
{
    int x=-1;
    if(q->front==q->rear)
        cout<<"queue is empty";
    else
    {
        q->front=(q->front+1)%q->size;
        x=q->qu[q->front];
    }
    return x;
}

void display(struct queue q)
{
    int i=q.front+1;
    do{
        cout<<q.qu[i]<<" ";
        i=(i+1)%q.size;

    }while(i!=(q.rear+1)%q.size);
    cout<<endl;
}

int max(struct queue q)
{
    int x=-1;
    for(int i=q.front+1;i!=(q.rear+1)%q.size;i++)
        {   if((q.qu[i])>x)
            x=q.qu[i];
        }
    return x;
}

int main()
{
    struct queue q;
    cout<<"enter the size";
        cin>>q.size;
        create(&q,q.size);
        enqueue(&q,5);
        enqueue(&q,10);
        enqueue(&q,15);
        enqueue(&q,20);
        enqueue(&q,25);
        display(q);
        cout<<"\n";
        cout<<max(q);
        cout<<"\n";
        cout<<dequeue(&q);
        cout<<"\n";
        cout<<dequeue(&q);
        cout<<"\n";
        display(q);
        return 0;
}
