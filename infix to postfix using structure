// only for expression with + * / - not applicable for expression with higher precedence than this operators
#include <iostream>
#include <cstring>
#include<string>
using namespace std;
struct Node
{
    char data;
    struct Node *next;

}*top=nullptr;

void push(char x)
{
    struct Node *t;
    t=new Node;
    if(t==nullptr)
        cout<<"stack is full"<<"\n";
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}
char pop()
{
    struct Node *t;
    char x=-1;
    if(top==nullptr)
    cout<<"Stack is Empty"<<"\n";
    else
    {
        t=top;
        top=top->next;
        x=t->data;
        free(t);
    }
    return x;
}

void Display()
{
    struct Node *p;
    p=top;
    while(p!=nullptr)
    {
        cout<<p->data;
        p=p->next;
    }
    cout<<"\n";
}

int pre(char x)
{
    if(x=='+' || x=='-')
        return 1;

    else if(x=='*' || x=='/')
        return 2;

    return 0;
}
int isOperand(char x)
{
    if(x=='+' || x=='-' || x=='*' || x=='/' || x=='^')
        return 0;
    else
        return 1;
}
char * InToPost(char *infix)
{
    int i=0,j=0;
    char *postfix;
    int len=strlen(infix);
    postfix=new char[strlen(infix)+2];
    while(infix[i]!='\0')
    {
        if(isOperand(infix[i]))
            postfix[j++]=infix[i++];
        else
        {
            if(pre(infix[i])>pre(top->data))
                push(infix[i++]);
            else
            {
                postfix[j++]=pop();
            }
        }
    }
    while(top!=nullptr)
    postfix[j++]=pop();
    postfix[j]='\0';
    return postfix;
}
int main()
{
    char *infix="a+b*c-d/e";
    push('#'); // initially stack may be empty so this may give error thus we are pushing # to deal with it
    char *postfix=InToPost(infix);
    cout<<postfix;

    cout<<"\n";

    return 0;

}
