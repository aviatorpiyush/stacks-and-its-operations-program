
#include <iostream>
#include <cstring>
#include<string>
using namespace std;
struct Node
{
    char data;
    struct Node *next;

}*top=nullptr;

void push(char x)
{
    struct Node *t;
    t=new Node;
    if(t==nullptr)
        cout<<"stack is full"<<"\n";
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}
char pop()
{
    struct Node *t;
    char x=-1;
    if(top==NULL)
    cout<<"Stack is Empty"<<"\n";
    else
    {
        t=top;
        top=top->next;
        x=t->data;
        free(t);
    }
    return x;
}

void Display()
{
    struct Node *p;
    p=top;
    while(p!=NULL)
    {
        cout<<p->data;
        p=p->next;
    }
    cout<<"\n";
}


int isBalanced(char *exp)
{
    int i;
    for(i=0;exp[i]!='\0';i++)
    {
         char x='\0';
        if (exp[i] == '(' || exp[i]=='{' || exp[i]=='[')
        {
            push(exp[i]);
        }
        else if (exp[i] == ')' || exp[i]=='}' || exp[i]==']')
        {
            if (top==nullptr)
            {
                return false;
            }
            else
            {
                switch (exp[i])
                {
                    case ')':


                    x = top->data;
                    pop();
                    if (x == '{' || x == '[')
                        return false;
                    break;

                    case '}':


                    x = top->data;
                    pop();
                    if (x == '(' || x == '[')
                        return false;
                    break;

                    case ']':


                    x = top->data;
                    pop();
                    if (x == '(' || x == '{')
                        return false;
                    break;
                }
            }
        }

    }


    return top ? false: true;


}

int main()
{
// you can check only 1 expression at a time with this

//    char * exp="(([a+b})*([{c-d]}))";
//    cout<<isBalanced(exp)<<"\n";

//    char * exp= "(((a+b)*(c-d)))";
//    cout<<isBalanced(exp)<<"\n";

//    char *exp="(((a+b)*(c-d))";
//    cout<<isBalanced(exp)<<"\n";
//
    char *exp="[{([{()}])}]";
    cout<<isBalanced(exp)<<"\n";
    return 0;
}
